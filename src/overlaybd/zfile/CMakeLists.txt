file(GLOB SOURCE_ZFILE "*.cpp")
file(GLOB SOURCE_LZ4 "lz4/*.c")
file(GLOB SOURCE_CRC32 "crc32/crc32c.cpp")

set (CMAKE_CXX_STANDARD 17)
add_library(crc32_lib STATIC ${SOURCE_CRC32})
target_include_directories(crc32_lib PUBLIC
    ${PHOTON_INCLUDE_DIR}
)

if (CMAKE_SYSTEM_PROCESSOR STREQUAL x86_64)
    target_compile_options(crc32_lib PUBLIC -msse4.2 -mcrc32)
else()
    if (NOT CMAKE_CXX_FLAGS MATCHES "-march=|-mcpu=")
        check_cxx_compiler_flag(-mcpu=native COMPILER_HAS_NATIVE_FLAG)
        if (COMPILER_HAS_NATIVE_FLAG)
            target_compile_options(crc32_lib PRIVATE -mcpu=native)
        else ()
            target_compile_options(crc32_lib PRIVATE -mcpu=generic+crc)
        endif ()
    endif ()
endif()

if(ENABLE_DSA OR ENABLE_ISAL)
    add_subdirectory(thirdparty)
    add_dependencies(crc32_lib thirdparty_lib)
    target_link_directories(crc32_lib PUBLIC ${LIBRARY_OUTPUT_PATH})
    target_include_directories(crc32_lib PUBLIC ${LIBRARY_OUTPUT_PATH}/include)
    if(ENABLE_DSA)
        target_link_libraries(crc32_lib -lpci -ldmlhl -ldl)
        target_compile_definitions(crc32_lib PUBLIC -DENABLE_DSA)
    endif()
    if(ENABLE_ISAL)
        target_compile_options(crc32_lib PUBLIC -mavx512f)
        target_compile_definitions(crc32_lib PUBLIC -DENABLE_ISAL)
        target_link_libraries(crc32_lib -lisal)
    endif()
endif()

add_library(zfile_lib STATIC ${SOURCE_ZFILE} ${SOURCE_LZ4})
target_link_libraries(zfile_lib photon_static crc32_lib ${LIBZSTD})

if (ENABLE_QAT)
    add_subdirectory(thirdparty)
    add_dependencies(zfile_lib thirdparty_lib)
    # target_link_directories(zfile_lib PUBLIC ${LIBRARY_OUTPUT_PATH})
    # target_include_directories(zfile_lib PUBLIC ${LIBRARY_OUTPUT_PATH}/include)
    target_compile_definitions(zfile_lib PUBLIC -DENABLE_QAT)
    target_link_libraries(zfile_lib -lpci -lqatzip)
    #target_link_libraries(zfile_lib -lqat_s -lusdm_drv_s -lpthread -lpci)
endif()

set (CMAKE_CXX_STANDARD 14)

if (BUILD_TESTING)
    add_subdirectory(test)
endif ()
